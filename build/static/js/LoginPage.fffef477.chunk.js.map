{"version":3,"sources":["shared/utilities/classNames.ts","shared/components/Button/Button.tsx","shared/components/Dropdown/Dropdown.tsx","shared/components/Menu/Menu.tsx","shared/components/Button/constants.ts","shared/components/Button/ButtonAction.tsx","shared/components/Button/index.ts","shared/graphql/User/schema.gql.ts","shared/components/RatioBox/constants.ts","shared/components/RatioBox/RatioBox.tsx","shared/components/Picture/Picture.tsx","shared/components/Picture/index.ts","shared/components/Input/Input.tsx","shared/components/Input/InputArea.tsx","shared/components/Input/Search.tsx","shared/components/Input/index.ts","shared/components/Card/Card.tsx","shared/components/Card/index.ts","app/shell/components/MainMenu/assets/logo-dark.png","app/pages/LoginPage/LoginPage.tsx","app/pages/LoginPage/index.ts"],"names":["classNames","classes","names","forEach","name","classParts","Array","isArray","Object","keys","filter","key","push","x","concat","split","groups","cls","group","map","join","Button","React","ref","children","className","htmlType","id","loading","onClick","type","props","Dropdown","overlay","Menu","this","Item","AntMenu","buttonAction","activate","en","inactivate","ButtonAction","buttonType","crud","iconType","lang","title","updateCrud","fetch","handleClick","variables","payload","handleMenuClick","e","action","menu","Icon","renderActions","AUTH_LOGIN","gql","USER_BY_ID","USER_BY_USERNAME","USER_LIST","CREATE_USER","DELETE_USER","UPDATE_USER","authLogin","options","useQuery","getUserById","getUserByUsername","getUserList","createUser","useMutation","deleteUser","updateUser","RATIO_CLASSES","require","RatioBox","ratio","Picture","alt","imgClassName","objectFit","src","stretch","pictureVariant","Picture_Contained","Picture_Wide","pictureObjectFitStyle","Picture_Contain","Picture_Cover","Input","autoFocus","disabled","onBlur","onChange","onPressEnter","placeholder","prefix","suffix","value","InputArea","rows","TextArea","Search","onSearch","Card","bodyStyle","module","exports","LoginPage","isAuthenticated","useIsAuthenticated","useHistory","location","replace","state","from","Form","useForm","form","useState","username","password","isLogin","login","setLogin","updateAuth","authCheck","queryForm","query","skip","auth","data","Message","isSessionAuthenticated","Content","width","layout","onFinish","values","label","rules","required","message","Date","getFullYear"],"mappings":"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","file":"static/js/LoginPage.fffef477.chunk.js","sourcesContent":["interface ClassesObject {\n    [x: string]: boolean;\n}\n\ndeclare type className = string | ClassesObject | string[] | undefined;\n\nexport function classNames(...names: className[]) {\n    let classes: string[] = [];\n    names.forEach((name) => {\n        let classParts: string[] = [];\n        if (Array.isArray(name)) {\n            classParts = name;\n        } else if (typeof name === 'object') {\n            classParts = Object.keys(name).filter((key) => name[key]);\n        } else if (name) {\n            classParts.push(name);\n        }\n\n        classParts.forEach((x) => {\n            classes = classes.concat(x.split(' '));\n        });\n    });\n\n    let groups: any = {};\n    classes.forEach((cls) => {\n        if (!cls) {\n            return;\n        }\n        let [group] = cls.split('-');\n        groups[group] = cls;\n    });\n    return Object.keys(groups)\n        .map((key) => groups[key])\n        .join(' ');\n}\n","import { Button as AntButton } from 'antd';\nimport * as React from 'react';\n\nexport type ButtonType = 'link' | 'default' | 'ghost' | 'primary' | 'dashed' | 'danger';\n\ninterface ButtonProps {\n    children?: React.ReactNode;\n    className?: string;\n    htmlType?: 'button' | 'reset' | 'submit';\n    id?: string;\n    loading?: boolean;\n    type?: ButtonType;\n\n    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n}\n\nexport const Button = React.memo<ButtonProps>(\n    React.forwardRef(\n        (\n            { children, className, htmlType, id, loading, onClick, type, ...props },\n            ref?:\n                | string\n                | ((instance: AntButton | null) => void)\n                | React.RefObject<AntButton>\n                | null\n        ) => (\n            <AntButton\n                {...props}\n                className={className}\n                htmlType={htmlType}\n                id={id}\n                loading={loading}\n                onClick={onClick}\n                ref={ref}\n                type={type}\n            >\n                {children}\n            </AntButton>\n        )\n    )\n);\n","import { Dropdown as AntDropdown } from 'antd';\nimport * as React from 'react';\n\ninterface DropdownProps {\n    children: React.ReactElement;\n    overlay: React.ReactElement;\n}\n\nexport const Dropdown = React.memo<DropdownProps>(({ children, overlay }) => (\n    <AntDropdown overlay={overlay}>{children}</AntDropdown>\n));\n","import { Menu as AntMenu } from 'antd';\nimport { ClickParam } from 'antd/lib/menu';\nimport MenuItem from 'antd/lib/menu/MenuItem';\nimport * as React from 'react';\n\ninterface MenuProps {\n    className?: string;\n\n    onClick?: (param: ClickParam) => void;\n}\n\nexport class Menu extends React.PureComponent<MenuProps> {\n    static Item: typeof MenuItem;\n\n    render() {\n        let { children, className, onClick, ...props } = this.props;\n\n        return (\n            <AntMenu {...props} className={className} onClick={onClick}>\n                {children}\n            </AntMenu>\n        );\n    }\n}\nMenu.Item = AntMenu.Item;\n","export const buttonAction = {\n    activate: { en: 'Activate', id: 'Aktifasi' },\n    inactivate: { en: 'Inactivate', id: 'Tidak Aktif' },\n};\n","import * as React from 'react';\n\nimport { Lang } from 'src/core/api';\nimport { updateCrud } from 'src/core/graphql/crud';\n\nimport { Button, ButtonType } from 'src/shared/components/Button';\nimport { CrudConnectedProps } from 'src/shared/components/Crud';\nimport { Dropdown } from 'src/shared/components/Dropdown';\nimport { Icon } from 'src/shared/components/Icon';\nimport { Menu } from 'src/shared/components/Menu';\n\nimport { buttonAction } from './constants';\n\nexport interface ButtonActionProps extends CrudConnectedProps, Lang {\n    buttonType: ButtonType;\n    className?: string;\n    iconType?: string;\n    title: string;\n}\n\nexport const ButtonAction = ({\n    buttonType,\n    className,\n    crud,\n    iconType,\n    lang,\n    title,\n}: ButtonActionProps) => {\n    let [fetch] = updateCrud();\n\n    function handleClick() {\n        fetch({ variables: { payload: crud } });\n    }\n\n    function handleMenuClick(e: any) {\n        fetch({ variables: { payload: { ...crud, action: e.key } } });\n    }\n\n    function renderActions() {\n        let menu = (\n            <Menu onClick={handleMenuClick}>\n                <Menu.Item key='active'>{buttonAction.activate[lang]}</Menu.Item>\n                <Menu.Item key='inactive'>{buttonAction.inactivate[lang]}</Menu.Item>\n            </Menu>\n        );\n\n        return (\n            <Dropdown overlay={menu}>\n                <Button className={className} id='ButtonActions'>\n                    {title} {Icon['action']}\n                </Button>\n            </Dropdown>\n        );\n    }\n\n    function renderDefault() {\n        return (\n            <Button\n                className={className}\n                id='ButtonActionDefault'\n                onClick={handleClick}\n                type={buttonType}\n            >\n                {iconType && Icon[iconType]} {title}\n            </Button>\n        );\n    }\n\n    return crud.action === 'action' ? renderActions() : renderDefault();\n};\n","export * from './Button';\nexport * from './ButtonAction';\n","import { User } from 'src/core/api';\nimport { gql, useMutation, useQuery } from 'src/core/graphql';\n\nconst AUTH_LOGIN = gql`\n    query authLogin($payload: AuthLogin) {\n        authLogin(payload: $payload)\n    }\n`;\n\nexport const USER_BY_ID = gql`\n    query getUserById($id: ID!) {\n        getUserById(id: $id) {\n            id\n            name\n            role {\n                id\n            }\n            username\n        }\n    }\n`;\n\nexport const USER_BY_USERNAME = gql`\n    query getUserByUsername($username: String) {\n        getUserByUsername(username: $username) {\n            id\n            name\n            role {\n                id\n                name\n            }\n            username\n        }\n    }\n`;\n\nexport const USER_LIST = gql`\n    query getUserList($payload: ListPayload) {\n        getUserList(payload: $payload) {\n            data {\n                id\n                name\n                role {\n                    id\n                    name\n                }\n                username\n            }\n            total\n        }\n    }\n`;\n\nconst CREATE_USER = gql`\n    mutation createUser($payload: CreateUserPayload) {\n        createUser(payload: $payload) {\n            name\n            password\n            role {\n                id\n            }\n            username\n        }\n    }\n`;\n\nconst DELETE_USER = gql`\n    mutation deleteUser($payload: DeletePayload) {\n        deleteUser(payload: $payload) {\n            password\n        }\n    }\n`;\n\nconst UPDATE_USER = gql`\n    mutation updateUser($payload: UpdateUserPayload) {\n        updateUser(payload: $payload) {\n            name\n            password\n            role {\n                id\n            }\n            username\n        }\n    }\n`;\n\nexport const authLogin = (options: any) => useQuery<{ authLogin: Boolean }>(AUTH_LOGIN, options);\nexport const getUserById = (options: any) => useQuery<{ getUserById: User }>(USER_BY_ID, options);\nexport const getUserByUsername = (options: any) =>\n    useQuery<{ getUserByUsername: User }>(USER_BY_USERNAME, options);\nexport const getUserList = (options: any) => useQuery<{ getUserList: User[] }>(USER_LIST, options);\nexport const createUser = (options: any) => useMutation<{ createUser: User }>(CREATE_USER, options);\nexport const deleteUser = (options: any) => useMutation<{ deleteUser: User }>(DELETE_USER, options);\nexport const updateUser = (options: any) => useMutation<{ updateUser: User }>(UPDATE_USER, options);\n","export const RATIO_CLASSES = {\n    '1:1': 'RatioBox-1-1 w-100',\n    '1:2': 'RatioBox-1-2 w-100',\n    '1:3': 'RatioBox-1-3 w-100',\n    '9:16': 'RatioBox-9-16 w-100',\n};\n","import * as React from 'react';\n\nimport { classNames } from 'src/shared/utilities/classNames';\n\nimport { RATIO_CLASSES } from './constants';\n\nexport type Ratio = keyof typeof RATIO_CLASSES;\n\ninterface RatioBoxProps extends React.HTMLProps<HTMLDivElement> {\n    ratio?: Ratio;\n}\n\nrequire('./RatioBox.sass');\n\nexport const RatioBox = React.memo<RatioBoxProps>(({ ratio, className, ...props }) => {\n    className = classNames('position-relative', ratio && RATIO_CLASSES[ratio], className);\n\n    return <div {...props} className={className} />;\n});\n","import * as React from 'react';\n\nimport { Ratio, RatioBox } from 'src/shared/components/RatioBox';\nimport { classNames } from 'src/shared/utilities/classNames';\n\ninterface PictureProps\n    extends React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> {\n    alt: string;\n    imgClassName?: string;\n    objectFit?: '' | 'contain' | 'scale-down' | 'cover';\n    ratio?: Ratio;\n    stretch?: 'none' | 'width' | 'container';\n}\n\nrequire('./Picture.sass');\n\nexport const Picture = React.memo<PictureProps>(\n    ({\n        alt,\n        className,\n        imgClassName,\n        objectFit,\n        ratio,\n        src,\n        stretch = 'none',\n        title,\n        ...props\n    }) => {\n        let pictureVariant = {\n            Picture_Contained: stretch === 'container',\n            Picture_Wide: stretch === 'width',\n        };\n\n        let pictureObjectFitStyle = {\n            Picture_Contain: objectFit === 'contain',\n            Picture_Cover: objectFit === 'cover',\n            'Picture_Scale-Down': objectFit === 'scale-down',\n        };\n\n        return (\n            <RatioBox\n                className={classNames('Picture', pictureObjectFitStyle, pictureVariant, className)}\n                ratio={ratio}\n            >\n                <img alt={alt} className={imgClassName} src={src} title={title || alt} {...props} />\n            </RatioBox>\n        );\n    }\n);\n","export * from './Picture';\n","import { Input as AntInput } from 'antd';\nimport * as React from 'react';\n\ninterface InputProps {\n    autoFocus?: boolean;\n    className?: string;\n    disabled?: boolean;\n    id?: string;\n    placeholder?: string;\n    prefix?: React.ReactNode;\n    suffix?: React.ReactNode;\n    type?: string;\n    value?: string | number | string[];\n\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onPressEnter?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport const Input = React.memo<InputProps & { ref?: any }>(\n    React.forwardRef(\n        (\n            {\n                autoFocus,\n                className,\n                disabled,\n                id,\n                onBlur,\n                onChange,\n                onPressEnter,\n                placeholder,\n                prefix,\n                suffix,\n                type,\n                value,\n                ...props\n            },\n            ref?: any\n        ) => (\n            <AntInput\n                {...props}\n                autoFocus={autoFocus}\n                className={className}\n                disabled={disabled}\n                id={id}\n                onBlur={onBlur}\n                onChange={onChange}\n                onPressEnter={onPressEnter}\n                placeholder={placeholder}\n                prefix={prefix}\n                ref={ref}\n                suffix={suffix}\n                type={type}\n                value={value}\n            />\n        )\n    )\n);\n","import { Input as AntInput } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport * as React from 'react';\n\ninterface InputAreaProps {\n    disabled?: boolean;\n    rows?: number;\n}\n\nexport const InputArea = React.memo<InputAreaProps>(\n    React.forwardRef(\n        (\n            { disabled, rows, ...props },\n            ref?: string | ((instance: TextArea | null) => void) | React.RefObject<TextArea> | null\n        ) => <AntInput.TextArea {...props} disabled={disabled} ref={ref} rows={rows} />\n    )\n);\n","import { Input as AntInput } from 'antd';\nimport * as React from 'react';\n\ninterface SearchProps extends React.HTMLAttributes<any> {\n    placeholder?: string;\n\n    onSearch?: (value: any) => void;\n}\n\nexport const Search = React.memo<SearchProps>(\n    React.forwardRef(({ className, id, placeholder, onSearch, ...props }, ref?: any) => (\n        <AntInput.Search\n            {...props}\n            className={className}\n            id={id}\n            placeholder={placeholder}\n            onSearch={onSearch}\n            ref={ref}\n        />\n    ))\n);\n","export * from './Input';\nexport * from './InputArea';\nexport * from './Search';\n","import { Card as AntCard } from 'antd';\nimport * as React from 'react';\n\ninterface CardProps extends React.HTMLAttributes<any> {\n    bodyStyle?: React.CSSProperties;\n    children?: React.ReactNode;\n}\n\nexport const Card = React.memo<CardProps>(({ bodyStyle, children, className }) => (\n    <AntCard className={className} bodyStyle={bodyStyle}>\n        {children}\n    </AntCard>\n));\n","export * from './Card';\n","module.exports = __webpack_public_path__ + \"static/media/logo-dark.cbf24a77.png\";","import { Form, Layout } from 'antd';\nimport React from 'react';\n\nimport { updateAuth, useIsAuthenticated } from 'src/core/graphql/auth';\nimport { useHistory } from 'src/core/route';\n\nimport { Button } from 'src/shared/components/Button';\nimport { Card } from 'src/shared/components/Card';\nimport { Icon } from 'src/shared/components/Icon';\nimport { Input } from 'src/shared/components/Input';\nimport { Picture } from 'src/shared/components/Picture';\nimport { queryForm } from 'src/shared/graphql';\nimport { authLogin } from 'src/shared/graphql/User/schema.gql';\nimport { Message } from 'src/shared/utilities/message';\n\nrequire('./LoginPage.sass');\n\nexport function LoginPage() {\n    let isAuthenticated = useIsAuthenticated();\n    let { location, replace } = useHistory();\n    if (isAuthenticated) replace(location.state?.from || '/');\n\n    let [form] = Form.useForm();\n    let [login, setLogin] = React.useState({ username: '', password: '', isLogin: false });\n    let [fetch] = updateAuth();\n    let authCheck = queryForm({\n        query: authLogin,\n        skip: login.username === '' || login.password === '',\n        variables: { payload: { username: login.username, password: login.password } },\n    });\n\n    let auth = authCheck.data?.authLogin;\n\n    function handleFinish(values: any) {\n        let { username, password } = values;\n\n        setLogin({ ...login, username, password });\n    }\n\n    function isFieldEmpty() {\n        return login.username === '' || login.password === '';\n    }\n\n    if (!authCheck.loading && !login.isLogin && auth) {\n        fetch({\n            variables: {\n                payload: { isSessionAuthenticated: true, username: login.username },\n            },\n        });\n        setLogin({ ...login, isLogin: true });\n    } else if (!authCheck.loading && !isFieldEmpty() && !auth) {\n        Message('Username or Password incorrect', 'error');\n    }\n\n    return (\n        <Layout>\n            <Layout.Content className='d-flex fj-center'>\n                <Card bodyStyle={{ width: '100%' }} className='LoginCard m-4'>\n                    <Form className='mt-7' form={form} layout='vertical' onFinish={handleFinish}>\n                        <Form.Item\n                            label='Username'\n                            name='username'\n                            rules={[{ required: true, message: 'Please input the username' }]}\n                        >\n                            <Input prefix={Icon['user']} />\n                        </Form.Item>\n                        <Form.Item\n                            label='Password'\n                            name='password'\n                            rules={[{ required: true, message: 'Please input the password' }]}\n                        >\n                            <Input prefix={Icon['lock']} type='password' />\n                        </Form.Item>\n                        <Form.Item>\n                            <Button\n                                type='primary'\n                                htmlType='submit'\n                                className='mt-5 w-100'\n                                loading={authCheck.loading}\n                            >\n                                Log in\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                    <div className='d-flex fd-column ta-center'>\n                        Powered By\n                        <Picture\n                            alt='Lisys-Logo'\n                            imgClassName='w-25'\n                            src={require('src/app/shell/components/MainMenu/assets/logo-dark.png')}\n                        />\n                        © {new Date().getFullYear()}\n                    </div>\n                </Card>\n            </Layout.Content>\n        </Layout>\n    );\n}\n","export { LoginPage as default } from './LoginPage';\n"],"sourceRoot":""}