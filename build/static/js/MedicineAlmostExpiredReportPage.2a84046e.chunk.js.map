{"version":3,"sources":["shared/graphql/Medicine/schema.gql.ts","shared/components/Excel/Excel.tsx","app/pages/MedicineAlmostDepletedReportPage/constants.ts","app/pages/MedicineAlmostExpiredReportPage/constants.ts","app/pages/MedicineAlmostExpiredReportPage/MedicineAlmostExpiredReportPage.tsx","app/pages/MedicineAlmostExpiredReportPage/index.ts"],"names":["MEDICINE_BY_QUERY","gql","MEDICINE_LIST","MEDICINES","MEDICINE_ALMOST_DEPLETED","MEDICINE_ALMOST_EXPIRED","CREATE_MEDICINE","DELETE_MEDICINE","UPDATE_MANY_MEDICINE","UPDATE_MEDICINE","getMedicineAlmostDepleted","options","useQuery","getMedicineAlmostExpired","getMedicines","getMedicineByQuery","getMedicineList","createMedicine","useMutation","deleteMedicine","updateManyMedicine","updateMedicine","Excel","React","column","data","fileName","sheetName","filename","element","className","type","Icon","Sheet","name","map","Column","key","label","value","medicineExcelColumns","en","id","medicineExcelFileName","medicineExcelSheet","medicineTitle","MedicineAlmostExpiredReportPage","lang","getLanguage","queryMedicine","queryForm","query","loading","Spin","medicine","medicineAlmostExpired","length","code","supplier","expired_date","convertMilisecondsToDate","batch_no","handleData","Page","ReportCard","title","url"],"mappings":"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","file":"static/js/MedicineAlmostExpiredReportPage.2a84046e.chunk.js","sourcesContent":["import { Medicine, MedicineAlmostExpired } from 'src/core/api';\nimport { gql, useMutation, useQuery } from 'src/core/graphql';\n\nexport const MEDICINE_BY_QUERY = gql`\n    query getMedicineByQuery($payload: QueryPayload) {\n        getMedicineByQuery(payload: $payload) {\n            barcode\n            buy_price\n            category {\n                id\n                name\n            }\n            code\n            id\n            min_stock\n            name\n            sell_price\n            status\n            stock\n            uom {\n                id\n                name\n            }\n            variant {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const MEDICINE_LIST = gql`\n    query getMedicineList($payload: ListPayload) {\n        getMedicineList(payload: $payload) {\n            data {\n                barcode\n                buy_price\n                category {\n                    id\n                    name\n                }\n                code\n                id\n                min_stock\n                name\n                sell_price\n                status\n                stock\n                uom {\n                    id\n                    name\n                }\n                variant {\n                    id\n                    name\n                }\n            }\n            total\n        }\n    }\n`;\n\nexport const MEDICINES = gql`\n    query getMedicines {\n        getMedicines {\n            code\n            name\n            stock\n            uom {\n                name\n            }\n            sell_price\n        }\n    }\n`;\n\nexport const MEDICINE_ALMOST_DEPLETED = gql`\n    query getMedicineAlmostDepleted {\n        getMedicineAlmostDepleted {\n            code\n            name\n            stock\n            min_stock\n            sell_price\n        }\n    }\n`;\n\nexport const MEDICINE_ALMOST_EXPIRED = gql`\n    query getMedicineAlmostExpired {\n        getMedicineAlmostExpired {\n            batch_no\n            expired_date\n            medicine {\n                code\n                name\n            }\n            supplier {\n                name\n            }\n        }\n    }\n`;\n\nconst CREATE_MEDICINE = gql`\n    mutation createMedicine($payload: CreateMedicinePayload) {\n        createMedicine(payload: $payload) {\n            name\n        }\n    }\n`;\n\nconst DELETE_MEDICINE = gql`\n    mutation deleteMedicine($payload: DeletePayload) {\n        deleteMedicine(payload: $payload) {\n            name\n        }\n    }\n`;\n\nconst UPDATE_MANY_MEDICINE = gql`\n    mutation updateManyMedicine($payload: UpdateManyPayload) {\n        updateManyMedicine(payload: $payload) {\n            status\n        }\n    }\n`;\n\nconst UPDATE_MEDICINE = gql`\n    mutation updateMedicine($payload: UpdateMedicinePayload) {\n        updateMedicine(payload: $payload) {\n            name\n        }\n    }\n`;\n\nexport const getMedicineAlmostDepleted = (options: any) =>\n    useQuery<{ getMedicineAlmostDepleted: Medicine[] }>(MEDICINE_ALMOST_DEPLETED, options);\nexport const getMedicineAlmostExpired = (options: any) =>\n    useQuery<{ getMedicineAlmostExpired: MedicineAlmostExpired[] }>(\n        MEDICINE_ALMOST_EXPIRED,\n        options\n    );\nexport const getMedicines = (options: any) =>\n    useQuery<{ getMedicines: Medicine[] }>(MEDICINES, options);\nexport const getMedicineByQuery = (options: any) =>\n    useQuery<{ getMedicineByQuery: Medicine }>(MEDICINE_BY_QUERY, options);\nexport const getMedicineList = (options: any) =>\n    useQuery<{ getMedicineList: Medicine[] }>(MEDICINE_LIST, options);\nexport const createMedicine = (options: any) =>\n    useMutation<{ createMedicine: Medicine }>(CREATE_MEDICINE, options);\nexport const deleteMedicine = (options: any) =>\n    useMutation<{ deleteMedicine: Medicine }>(DELETE_MEDICINE, options);\nexport const updateManyMedicine = (options: any) =>\n    useMutation<{ updateManyMedicine: Medicine }>(UPDATE_MANY_MEDICINE, options);\nexport const updateMedicine = (options: any) =>\n    useMutation<{ updateMedicine: Medicine }>(UPDATE_MEDICINE, options);\n","import * as React from 'react';\nimport Workbook from 'react-excel-workbook';\n\nimport { Button } from 'src/shared/components/Button';\nimport { Icon } from 'src/shared/components/Icon';\n\ninterface ExcelProps {\n    column: {\n        label: string;\n        value: string;\n    }[];\n    data: any;\n    fileName: string;\n    sheetName: string;\n}\n\nexport const Excel = React.memo<ExcelProps>(({ column, data, fileName, sheetName }) => (\n    <Workbook\n        filename={fileName}\n        element={\n            <Button className='bg-green fg-white mr-2' type='default'>\n                {Icon['excel']} Excel\n            </Button>\n        }\n    >\n        <Workbook.Sheet data={data} name={sheetName}>\n            {column.map((column: { label: string; value: string }) => (\n                <Workbook.Column key={column.label} label={column.label} value={column.value} />\n            ))}\n        </Workbook.Sheet>\n    </Workbook>\n));\n","export const medicineExcelColumns = {\n    en: [\n        { label: 'Code', value: 'code' },\n        { label: 'Name', value: 'name' },\n        { label: 'Stock', value: 'stock' },\n        { label: 'Min Stock', value: 'min_stock' },\n        { label: 'Sell Price', value: 'sell_price' },\n    ],\n    id: [\n        { label: 'Kode', value: 'code' },\n        { label: 'Nama', value: 'name' },\n        { label: 'Stok', value: 'stock' },\n        { label: 'Minimal Stok', value: 'min_stock' },\n        { label: 'Harga Jual', value: 'sell_price' },\n    ],\n};\n\nexport const medicineExcelFileName = {\n    en: 'Medicine Almost Depleted.xlsx',\n    id: 'Obat Hampir Habis.xlsx',\n};\nexport const medicineExcelSheet = { en: 'Medicine Almost Depleted', id: 'Obat Hampir Habis' };\nexport const medicineTitle = { en: 'Generate Report', id: 'Buat Laporan' };\n","export const medicineExcelColumns = {\n    en: [\n        { label: 'Code', value: 'code' },\n        { label: 'Name', value: 'name' },\n        { label: 'Supplier', value: 'supplier' },\n        { label: 'Expired Date', value: 'expired_date' },\n        { label: 'Batch No', value: 'batch_no' },\n    ],\n    id: [\n        { label: 'Kode', value: 'code' },\n        { label: 'Nama', value: 'name' },\n        { label: 'Pemasok', value: 'supplier' },\n        { label: 'Tanggal Kadaluwarsa', value: 'expired_date' },\n        { label: 'No Batch', value: 'batch_no' },\n    ],\n};\n\nexport const medicineExcelFileName = {\n    en: 'Medicine Almost Expired.xlsx',\n    id: 'Obat Hampir Kadaluwarsa.xlsx',\n};\nexport const medicineExcelSheet = { en: 'Medicine Almost Expired', id: 'Obat Hampir Kadaluwarsa' };\n","import React from 'react';\n\nimport { Page } from 'src/app/shell/Page';\n\nimport { MedicineAlmostExpired } from 'src/core/api';\n\nimport { Excel } from 'src/shared/components/Excel/Excel';\nimport { ReportCard } from 'src/shared/components/ReportCard';\nimport { Spin } from 'src/shared/components/Spin';\nimport { queryForm } from 'src/shared/graphql';\nimport { getMedicineAlmostExpired } from 'src/shared/graphql/Medicine/schema.gql';\nimport { convertMilisecondsToDate } from 'src/shared/helpers/formatDate';\n\nimport { medicineTitle } from '../MedicineAlmostDepletedReportPage/constants';\nimport { getLanguage } from '../SettingPage/helpers';\nimport { medicineExcelColumns, medicineExcelFileName, medicineExcelSheet } from './constants';\n\nexport const MedicineAlmostExpiredReportPage = () => {\n    let lang = getLanguage();\n    let queryMedicine = queryForm({ query: getMedicineAlmostExpired });\n    if (queryMedicine.loading) return <Spin />;\n\n    let medicine = handleData(queryMedicine.data);\n\n    function handleData(data?: any) {\n        let medicineAlmostExpired = data?.getMedicineAlmostExpired;\n        if (!medicineAlmostExpired || !medicineAlmostExpired.length) {\n            return [];\n        }\n\n        return medicineAlmostExpired.map((medicineAlmostExpired: MedicineAlmostExpired) => {\n            return {\n                code: medicineAlmostExpired.medicine!.code,\n                name: medicineAlmostExpired.medicine!.name,\n                supplier: medicineAlmostExpired.supplier!.name,\n                expired_date: convertMilisecondsToDate(medicineAlmostExpired.expired_date),\n                batch_no: medicineAlmostExpired.batch_no,\n            };\n        });\n    }\n\n    return (\n        <Page>\n            <div className='d-flex fd-row fj-around mx-8 my-8'>\n                <ReportCard title='Medicine Almost Expired' url='/medicine_almost_expired'>\n                    <div className='d-flex fa-center fd-row'>\n                        <div className='tw-bold mr-4'>{medicineTitle[lang]} :</div>\n                        <Excel\n                            column={medicineExcelColumns[lang]}\n                            data={medicine}\n                            fileName={medicineExcelFileName[lang]}\n                            sheetName={medicineExcelSheet[lang]}\n                        />\n                    </div>\n                </ReportCard>\n            </div>\n        </Page>\n    );\n};\n","export { MedicineAlmostExpiredReportPage as default } from './MedicineAlmostExpiredReportPage';\n"],"sourceRoot":""}